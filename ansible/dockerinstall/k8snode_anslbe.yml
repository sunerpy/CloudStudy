---
- name: Tasks for setting k8snodes.
  hosts: k8snodes
  tasks:
    - name: Setting k8s hosts.
      lineinfile:
        line: "{{ item }}"
        path: /etc/hosts
        create: True
        state: present
      with_items:
        - '192.168.122.246 k8snode1'
        - '192.168.122.245 k8snode2'
        - '192.168.122.244 k8snode3'

    - name: Setting kernel parameters.
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        sysctl_file: /etc/sysctl.d/k8s.conf
        state: present
        reload: yes
      with_items:
        - { name: 'net.ipv4.ip_forward',value: 1 }
        - { name: 'net.bridge.bridge-nf-call-iptables',value: 1 }
        - { name: 'net.bridge.bridge-nf-call-ip6tables',value: 1 }
        - { name: 'vm.max_map_count',value: 262144 }

    - name: Setting kernel mod
      modprobe:
        name: "br_netfilter"
        state: present
    
    - name: Setting selinux and firewalld
      selinux:
        state: disabled
    - name: Setting firewalld option on boot
      service:
        name: firewalld
        state: stopped
        enabled: no
    - name: Shell script
      shell: 
        cmd: |
          swapoff -a
          sed -r -i '/^[^#].*swap/{s/^.*$/#&/g}' /etc/fstab
          curl -o /etc/yum.repos.d/Centos-7.repo http://mirrors.aliyun.com/repo/Centos-7.repo
          curl -o /etc/yum.repos.d/docker-ce.repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo

    - name: Install needed network manager libs
      ansible.builtin.package:
        name:
          - NetworkManager-libnm
          - nm-connection-editor
          - libsemanage-python
          - policycoreutils-python
        state: present

    - name: Setting nmcli
      nmcli:
        conn_name: eth0
        ifname: eth0
        dns4:
        - 223.5.5.5
        - 192.168.122.1
        state: present

    - name: Setting docker repo
      yum_repository:
        name: Kubernetes
        baseurl: http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64
        description: Kubernetes
        enabled: yes
        gpgkey: "http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg \n http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg"
        gpgcheck: yes
        state: present

    - name: Command for yum_repository
      shell:
        cmd: |
          yum clean all
          yum makecache

    - name: Check docker and enabled it when start.
      yum:
        name: "{{ item }}"
        state: present
      with_items:
        - 'docker-ce-cli'
        - 'container-selinux'
        - 'containerd'
        - 'docker-ce'

    - name: Set profile of HISTSIZE
      lineinfile:
        regexp: "^HISTSIZE=*"
        path: /etc/profile
        line: "HISTSIZE=30000"

    - name: Remove original file of docker registry
      file:
        path: /etc/docker/daemon.json
        state: absent

    - name: Set docker registry
      lineinfile:
        #line: '{"registry-mirrors": ["https://y5wbw67l.mirror.aliyuncs.com"]}'
        line: "{{ item }}"
        path: /etc/docker/daemon.json
        create: True
        state: present
      with_items:
        - '{'
        - '"exec-opts" : [ "native.cgroupdriver=systemd" ],'
        - '  "registry-mirrors" : ['
        - '    "https://y5wbw67l.mirror.aliyuncs.com",'
        - '    "https://registry.docker-cn.com",'
        - '    "https://dockerhub.azk8s.cn"'
        - '  ]'
        - '}'
    
    - name: Enable docker on boot
      service:
        name: docker
        state: restarted
        # enabled: yes
    
    - name: Install needed k8s pkgs
      ansible.builtin.package:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
    
    - name: K8s service Onboot
      service:
        name: "{{ item }}"
        state: started
        enabled: yes
      with_items:
        - kubelet
        - docker
  tags: allnodesmod

- name: Tasks for setting k8s master.
  hosts: k8smaster
  tasks:
    - name: k8s kubeadm.yaml check.
      shell:
        cmd: ls /root/kubeadm.yaml
      register: returnmsg
      ignore_errors: True

    - name: k8s init settings
      shell:
        cmd:
          kubeadm config print init-defaults > kubeadm.yaml
      args:
        chdir: /root/
      when: returnmsg.rc != 0

    - name: Set profile of kubeadm.yaml
      lineinfile:
        regexp: " *advertiseAddress"
        path: /root/kubeadm.yaml
        line: "  advertiseAddress: {{ ansible_eth0['ipv4']['address'] }}"
        backrefs: yes

    - name: Modify imageRepository with aliyun
      lineinfile:
        regexp: "^imageRepository:"
        path: /root/kubeadm.yaml
        line: "imageRepository: registry.aliyuncs.com/google_containers"
        backrefs: yes

    - name: Modify k8s master node 
      lineinfile:
        regexp: "^ *name:"
        path: /root/kubeadm.yaml
        line: "  name: k8snode1"
        backrefs: yes

    - name: Modify podsubnet with 10.244.0.0/16
      lineinfile:
        insertafter: "^ *dnsDomain"
        path: /root/kubeadm.yaml
        line: "  podSubnet: 10.244.0.0/16  # Pod 网段,flannel插件需要使用这个网段"

    - name: k8s images list
      shell:
        cmd:
          kubeadm config images list --config kubeadm.yaml
      args:
        chdir: /root/
      register: return_image_msg

    - name: k8s images check
      shell:
        cmd:
          docker images |grep "kube-apiserver"
      register: return_local_images_msg
      ignore_errors: True
    
    - name: k8s images pull
      shell:
        cmd:
          kubeadm config images pull --config kubeadm.yaml
      args:
        chdir: /root/
      when: return_image_msg.rc == 0 and return_local_images_msg.rc != 0

    - name: k8sinit.json check
      shell: ls /root/k8sinit.json
      register: return_init_json_msg
      ignore_errors: True

    - name: k8s init settings
      shell:
        cmd:
          kubeadm init --config kubeadm.yaml
      args:
        chdir: /root/
      register: return_init_msg
      when: return_init_json_msg.rc != 0

    - name: k8s init once and save result.stdout in json file
      shell:
        cmd:
          echo "{{ return_init_msg.stdout }}" > /root/k8sinit.json
      args:
        chdir: /root/
      when: return_init_msg.rc == 0

    - name: kubectl settings
      shell:
        cmd: |
          mkdir -p $HOME/.kube
          sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
          sudo chown $(id -u):$(id -g) $HOME/.kube/config
      when: return_init_json_msg.rc == 0

    - name: Getting remote file in ansible node .
      fetch:
        src: /root/k8sinit.json
        dest: /home/admin/CloudStudy/ansible/dockerinstall/



- name: Tasks for setting k8s slave
  hosts: k8sslave
  tasks:
    - name: copy k8smaster file to slave
      copy:
        src: /home/admin/CloudStudy/ansible/dockerinstall/k8snode1/root/k8sinit.json
        dest: /root/k8sinit.json

    - name: k8smaster init code
      shell:
        cmd: sed -n '/kubeadm join/p' /root/k8sinit.json
      register: return_k8s_join_msg

    - name: k8s slave join
      shell:
        cmd: "{{ return_k8s_join_msg.stdout }}"
      register: return_k8s_joincode_msg

- name: Tasks for k8smaster
  hosts: k8smaster
  tasks:
    

    #   debug:
    #     msg: ' etho ip is "{{ return_init_msg }}" '
        # imageRepository: